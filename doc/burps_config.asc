burps_config(7)
===============

NAME
----
burps_config - The burps configuration

DESCRIPTION
-----------

All configuration options can be defined in 3 different places :

- in the main configuration in your working directory

- in the global system configuration

- in a project configuration

- with a command line option

In each configuration file, it is possible to set per distribution
options. See link:burps_distributions.html[burps_distributions(7)] for
details.

The option values are used with the following priority order :

- command line options

- project config for matching target and distribution(s)

- project config for matching target

- project config for matching distribution(s)

- project config

- workspace config for matching target and distributions(s)

- workspace config for matching target

- workspace config for matching distributions(s)

- workspace config

- system config for matching target and distributions(s)

- system config for matching target

- system config for matching distributions(s)

- system config

- default config for matching distribution(s)

- default config

- undefined

The system configuration is by default located at +/etc/burps.conf+, or
the path defined in the +sysconf_file+ option. If the path does not
exists, it is ignored. This is where you will put configuration only
relevant to your local use of burps.

The main configuration file is +burps.conf+, in YAML format. It can be
located anywhere on your filesystem, but you will need to run the
*burps* commands from the same directory, or one of its subdirectories.
This is where you will put configuration relevant to all projects under
this working directory. All relative paths used in the configuration
are relative from the +burps.conf+ location.

An example +burps.conf+ file will look like this :

----
projects_dir: projects
compress_tar: xz
----

The +projects_dir+ option define the path to the directory containing
the projects definitions.

Adding a new project is done by creating a directory with the name of
the project inside the +projects_dir+ directory, and adding a +config+
file in this new directory. The +config+ file contains the configuration
for the project. At the minimum it should contain the +git_url+
configuration, and any other configuration option you want to set for
this project.

OPTIONS
-------

The following configuration options are available :

sysconf_file::
        The path to an optional system configuration file. The default
        is +/etc/burps.conf+. This can also be set with the --sysconf-file
        command line parameter.

projects_dir::
        The directory containing the projects definitions. The default
        value is +projects+.

git_clone_dir::
        The directory used to store clones of git repositories. The
        default value is +git_clones+.

tmp_dir::
        The directory used to create temporary directories and files.
        This is the directory where builds will be done, so you want to
        use a directory on a fast device, with enough space available.
        This directory will contains some scripts that will be executed,
        so it should not be on a partition mounted as noexec.

output_dir::
        The directory where output files (tarballs, spec files or
        packages) are created. The default value is +out+.

fetch::
        The value should be 0 or 1, depending on whether the commits
        from the remote git repository should be fetched automatically.

include::options_tar.asc[]

arch::
        The architecture, as returned by 'uname -m'.

version::
        Version number of the software. This is used to create the
        tarball, and as the package version number.

version_command::
        A command to run in the checked out source tree to determine
        the version, if the +version+ option is not set. The command
        should print the version on stdout.

pkg_rel::
        Package release number.

distribution::
        The name of the distribution for which you wish to build a package.
        See link:burps_distributions.html[burps_distributions(7)] for details.

target::
        The target for which you want to build. This is usually set on
        command line. See link:burps_targets.html[burps_targets(7)] for
        details.

targets::
        The targets definitions. See link:burps_targets.html[burps_targets(7)]
        for details.

copy_files::
        A list of files that should be copied when building the package.
        Path is relative to the project's template directory.

input_files::
        Configuration for external input files. See
        link:burps_input_files.html[burps_input_files(7)] for details.

timestamp::
        This is the UNIX timestamp, set as modification time on files
        created such as the sources tarball and rpm spec file. The
        default is to use the commit time of the commit used. If set to
        0 it will use the current time.

notmpl::
        An array containing a list of options that should not be
        processed as template (see the +template+ section below for
        details).

include::options_rpm.asc[]

include::options_deb.asc[]

include::options_pkg.asc[]

build::
        This is the content of the build script used by the +build+
        command. The default is to include the template file named
        +build+.

include::options_publish.asc[]

include::options_misc.asc[]

In addition to the configuration options listed here, you are free to
add any other options that you want, and use them in the template files.
Unfortunately this also means that you won't have an error message in
case of typo in an option name.

WRITTING CONFIGURATION IN PERL
------------------------------

The configuration is in YAML, but you can also use the perl syntax to
set some configuration options. A YAML file can contain multiple
documents, separated by a line with tree dashes ('---'). When reading
a configuration file, burps will read all documents contained in the
file, and for each of them will :

 - if the document is a hash, use it as configuration

 - if the document is a string, evaluate it as perl, and get the return
   value as as hash containing configuration

If multpiple documents define the same options, the value from the last
one override the values from previous documents.

A configuration file that includes perl code will look like this :
----------------------------
option_1: value 1
option_2: value 2
option_3: value 3
--- |
 (
      option_4 => "value 4",
      option_5 => "value 5",
 )
----------------------------

In this example, 'option_4' and 'option_5' and defined using perl syntax.
Note that the perl code block needs to be indented with at least one space.

An interesting benefit of writting options in perl is that you can
define some options using a perl function reference. If the value of an
option is a function reference, then when that option is looked up the
function will be executed, and the value of the option will be the
return value of the function. The function will receive as parameters
the project's name, an options array reference, and the option that is
queried.

An option defined using a perl function will look like this :
----------------------------
option_1: value 1
--- |
 (
    option_2 => "value 2",
    option_3 => sub {
        my ($project, @option) = @_;
        return "value 3";
    },
 )
----------------------------


SEE ALSO
--------
link:burps.html[burps(1)],
link:burps_distributions.html[burps_distributions(7)],
link:burps_targets.html[burps_targets(7)],
link:burps_templates.html[burps_templates(7)]
