mkpkg_templates(7)
==================

NAME
----
mkpkg_templates - A description of the mkpkg templates


DESCRIPTION
-----------

All configuration options are actually templates. So you can use
template directives in any of the option. There are a few exceptions
however, for the options that are needed to process templates, so they
can't be templated themself. The following options are not templated :

 - distribution
 - projects_dir

If you want to make other options not templated, add them to the
+notmpl+ config option, which is an array. All the other options are
automatically processed as template.

The template are made using perl Template Toolkit. You can read more
about the syntax on the http://www.template-toolkit.org/[Template
Toolkit website].

From any template, it is possible to include other template files using
the +INCLUDE+ directive. The template files are added to the directory
+projects_dir/project+ where +projects_dir+ is the projects directory
(the default is +projects+) and +project+ the name of the project. Other
template files can be added in the directory +projects_dir/common+, to
be included from any of the other templates.

There are different template files :
By default, the following template files are used :

- the rpm spec file template, named +project.spec+ (replacing +project+
  with the project's name). This is used when you use the +rpmspec+,
  +srpm+ +rpm+, or +build+ commands. This creates the +rpmspec+ option.
  If you don't want to use this file, just replace the +rpmspec+ option
  by something else.

- the build script template, named +build+. This template is used to
  create a build script, that is executed when you use the +build+
  command. This creates the +build+ option.

The following variables can be used in the template files :

config::
        contains all the configuration. You can view the content with
        `mkpkg showconf`.

c::
        This variable is a function reference. Instead of accessing the
        +config+ variable directly, you can use the +c+ function which
        will look at the command line parameters, the project specific
        configuration then the global configuration and return the first
        defined one. The syntax to use this function is `c('option-name')`.
        Optionally it can take as a second argument a hash table
        containing options to override temporarily (in template processing).
        Additionally the 2nd argument can contain the following options :
        +no_tmpl+ : set this to 1 if you want to disable template processing
        for this option lookup. +error_if_undef+ : set this to 1 (for
        default error message) or a string containing an error message
        if you want to exit with an error when the selected option is
        undefined.

project::
        The name of the project for which we are processing a template.

p::
        The project's configuration. This is a shortcut for the value
        of `config.projects.$project`.

d::
        The selected distribution configuration. This is a shortcut for
        `distro = c('distribution'); config.distributions.$distro`.

dest_dir::
        The destination directory, where the resulting files will be
        stored at the end of the build. This is mainly useful in build
        script templates, and probably not useful in package template
        files.

exit_error::
        A function that you can use to exit with an error. The first
        argument is an error message. The second argument is an optional
        exit code (default is 1).

exec::
        A function taking a command line as argument, to be executed in
        the sources tree. The output of the command is returned, if the
        exit code was 0. If the argument starts with '#', then it is
        considered to be a script, which will be written to a temporary
        file and executed.

path::
        A function to return an absolute path. It takes a path as first
        argument. If the path is already an absolute path, then it
        returns the same thing. If the path is a relative path, it
        returns the path concatenated with +basedir+ which is the
        directory where the main configuration file is located.
        Optionally it can take a second argument to set an other value
        for the +basedir+.

tmpl::
        A function taking a template text as argument, and returning it
        processed.

shell_quote::
        A function to quote strings to use them as argument in command
        lines. This is the function from String::ShellQuote perl module.

versioncmp::
        A function to compare two version numbers. It returns -1, 0, or
        1 depending on whether the first argument is less than, equal
        to, or greater than the second argument. This is the function
        from the Sort::Versions perl module.


EXAMPLES
--------

In your rpm spec file, you want to add a build require, but only for
versions higher than 0.3, so you add this to your rpm spec template file :
----
[% IF versioncmp(c('version'), '0.3') > 0 -%]
BuildRequires: some_buildrequire
[% END -%]
----


SEE ALSO
--------
link:mkpkg.html[mkpkg(1)]
